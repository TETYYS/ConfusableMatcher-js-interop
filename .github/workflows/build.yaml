name: build
on:
    push:
        branches:
            - master
        paths:
            # Source
            - src/**
            # Workflow
            - .github/workflows/build.yaml
            # Docker
            - docker/**
            - .dockerignore
            # TypeScript
            - tsconfig*
    pull_request:
        paths:
            # Source
            - src/**
            # Workflow
            - .github/workflows/build.yaml
            # Docker
            - docker/**
            - .dockerignore
            # TypeScript
            - tsconfig*

env:
    DOCKER_IMAGE_NAME: 'confusablematcher-js-interop'
    DOCKER_BUILD_CACHE_DIR: /home/runner/.docker/buildkit

jobs:
    build-development:
        runs-on: ubuntu-20.04
        if: github.ref != 'refs/heads/master'
        steps:
            - name: Checkout Latest Commit
              uses: actions/checkout@v2
              with:
                  submodules: recursive
                  fetch-depth: 2

            - name: Download Docker Build Cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.DOCKER_BUILD_CACHE_DIR }}
                  key: ${{ runner.os }}-${{ hashFiles('Dockerfile') }}

            - name: Install BuildKit
              run: |
                  BUILDKIT_URL="$(curl -sL https://api.github.com/repos/moby/buildkit/releases \
                      | jq -r 'map(select(.name|startswith("v")))|sort_by(.name)[-1].assets[]|select(.name|endswith(".linux-amd64.tar.gz")).browser_download_url')"
                  curl -L "${BUILDKIT_URL}" | sudo tar -xz -C /usr/local

            - name: Start Buildkit Daemon
              run: |
                  sudo --non-interactive --shell <<END_SUDO
                      install -d -m 0750 -o root -g docker /run/buildkit
                      buildkitd &
                      while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done
                      chgrp docker /run/buildkit/buildkitd.sock
                  END_SUDO

            - name: Build Docker (Development Target)
              run: |
                  if [ $GITHUB_BASE_REF ]; then
                      # Pull Request
                      export TITLE="${{ github.event.pull_request.title }}"
                  else
                      # Push
                      export TITLE="${{ github.event.head_commit.message }}"
                  fi

                  buildctl build \
                      --frontend=dockerfile.v0 --local dockerfile=. --local context=. \
                      --opt target=development \
                      --export-cache type=local,dest=${DOCKER_BUILD_CACHE_DIR},mode=max \
                      --import-cache type=local,src=${DOCKER_BUILD_CACHE_DIR} \
                      --output type=docker,dest=/tmp/development.tar,name=${DOCKER_IMAGE_NAME}-development

            - name: Upload Development Docker Image
              uses: actions/upload-artifact@v2
              with:
                  name: development
                  path: /tmp/development.tar

    typecheck:
        runs-on: ubuntu-20.04
        needs:
            - build-development
        steps:
            - name: Download Development Image
              uses: actions/download-artifact@v2
              with:
                  name: development
                  path: /tmp

            - name: Load Development Docker Image
              run: |
                  docker load --input /tmp/development.tar
                  docker image ls -a

            - name: Run Typecheck
              run: |
                  docker run \
                    --entrypoint "/bin/bash" \
                    ${DOCKER_IMAGE_NAME}-development \
                    -c "yarn typecheck"

    lint:
        runs-on: ubuntu-20.04
        needs:
            - build-development
        steps:
            - name: Download Development Image
              uses: actions/download-artifact@v2
              with:
                  name: development
                  path: /tmp

            - name: Load Development Docker Image
              run: |
                  docker load --input /tmp/development.tar
                  docker image ls -a

            - name: Run Lint
              run: |
                  docker run \
                    --entrypoint "/bin/bash" \
                    ${DOCKER_IMAGE_NAME}-development \
                    -c 'yarn lint'

    test:
        runs-on: ubuntu-20.04
        needs:
            - build-development
        steps:
            - name: Download Development Image
              uses: actions/download-artifact@v2
              with:
                  name: development
                  path: /tmp

            - name: Load Development Docker Image
              run: |
                  docker load --input /tmp/development.tar
                  docker image ls -a

            - name: Run Tests
              run: |
                  docker run \
                    --entrypoint "/bin/bash" \
                    ${DOCKER_IMAGE_NAME}-development \
                    -c "yarn test"

    build-production:
        runs-on: ubuntu-20.04
        needs:
            - build-development
            - typecheck
            - lint
            - test
        steps:
            - name: Checkout Latest Commit
              uses: actions/checkout@v2
              with:
                  submodules: recursive
                  fetch-depth: 2

            - name: Download Docker Build Cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.DOCKER_BUILD_CACHE_DIR }}
                  key: ${{ runner.os }}-${{ hashFiles('Dockerfile') }}

            - name: Install BuildKit
              run: |
                  BUILDKIT_URL="$(curl -sL https://api.github.com/repos/moby/buildkit/releases \
                      | jq -r 'map(select(.name|startswith("v")))|sort_by(.name)[-1].assets[]|select(.name|endswith(".linux-amd64.tar.gz")).browser_download_url')"
                  curl -L "${BUILDKIT_URL}" | sudo tar -xz -C /usr/local

            - name: Start Buildkit Daemon
              run: |
                  sudo --non-interactive --shell <<END_SUDO
                      install -d -m 0750 -o root -g docker /run/buildkit
                      buildkitd &
                      while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done
                      chgrp docker /run/buildkit/buildkitd.sock
                  END_SUDO

            - name: Build Docker (Production Target)
              run: |
                  if [ $GITHUB_BASE_REF ]; then
                      # Pull Request
                      export TITLE="${{ github.event.pull_request.title }}"
                  else
                      # Push
                      export TITLE="${{ github.event.head_commit.message }}"
                  fi

                  buildctl build \
                      --frontend=dockerfile.v0 --local dockerfile=. --local context=. \
                      --export-cache type=local,dest=${DOCKER_BUILD_CACHE_DIR},mode=max \
                      --import-cache type=local,src=${DOCKER_BUILD_CACHE_DIR} \
                      --output type=docker,dest=/tmp/production.tar,name=${DOCKER_IMAGE_NAME}

            - name: Upload Production Docker Image
              uses: actions/upload-artifact@v2
              with:
                  name: production
                  path: /tmp/production.tar
